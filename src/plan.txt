На этой стадии нужно написать программу, которая
1.считывает коэффициенты системы линейных уравнений из файла.
1.1 Первая строка содержит N - число переменных и уравнений.
1.2 Каждая последующая строка - N+1 чисел - N коэффициентов уравнения,
    и последнее число - правая часть уравнения - константа.
2.решает систему линейных уравнений
3.записывает ответ в другой файл.
3.1 В файл должны быть записаны только ответы, разделенные "\n".
4.пути к файлам следует передавать как аргументы командной строки.
5.Весь процесс решения/преобразований со строками должен быть выведен на консоль.
6.Постарайтесь создать различные классы такие как: Matrix, Row, LinearEquation.
Пример вывода: The lines which start with > represent the user input.

> java Solver -in in.txt -out out.txt
Start solving the equation.
Rows manipulation:
-2 * R1 + R2 -> R2
-3 * R1 + R3 -> R3
0.5 * R2 -> R2
-3 * R2 + R3 -> R3
-2 * R3 -> R3
3.5 * R3 + R2 -> R2
-2 * R3 + R1 -> R1
-1 * R2 + R1 -> R1
The solution is: (1.0, 2.0, 3.0)
Saved to file out.txt

Алгоритм преобразований.
1.Обнулить все коэффициенты первого столбца кроме первого, он должен стать = 1.
2.Последовательно обнулить все коэффициенты второго и последующего столбцов
пока в последней строке все коэффициенты не обнулятся кроме последнего столбца.
3.Вторая часть алгоритма - обнулять коэффициенты выше диагонали,
начиная с последней строки до первой.
4.После этих преобразований решением уравнений будет правая часть матрицы.
Стадия 4.
Может быть случай, когда коэффициент, на который мы будем умножать будет равен 0.
Поэтому перед операцией умножения нужно проверить, коэффициент на равенство 0.
Если нужно искать ненулевой элемент ниже и правее.
1. Если ненулевой элемент ниже, то нужно переставить строки местами
2. Если ниже все элементы нулевые, то продолжаем искать правее
от элемента. Если находим, переставляем столбцы,строки.
Состояние столбцов/строк до перестановки необходимо запомнить,
чтобы после реализации вернуть все на место в исходном порядке и
вывести решение в нужном порядке. В общей сложности может быть
много перестановок.
Если ненулевой элмент не находится ниже и правее, то ищется
ненулевой элемент по всей левой части матрицы и при нахождении
переставляем соответствущие строки и столбцы.
Если ненулевой элемент не найден, первая часть алгоритма завершается.

После этого проверяем на количество решений.
1. все коэффициенты левой части нулевые, п.ч. ненулевая - нет решений.
2. если количество ненулевых элементов на главной диагонали
совпадает с количеством уравнений (в п.ч. не нули) - одно решение
3. если на главной дигонали есть нулевые элементы + в п.ч.нули
-> бесконечно много решений.
C1,C2,C3(1<->2)C2,C1,C3(1<->3)C3,C1,C2
colMove[1]=3
colMove[2]=1
colMove[3]=2
